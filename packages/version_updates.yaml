rest:
  - resource: https://api.github.com/repos/home-assistant/core/releases/latest
    sensor:
      name: hass_release_notes
      value_template: >
        {{ value_json.name }}
      json_attributes:
        - body
    scan_interval: 21600

  - resource: https://api.github.com/repos/home-assistant/core/releases?per_page=1
    sensor:
      name: hass_release_notes_beta
      value_template: >
        {{ value_json[0].name }}
      json_attributes:
        - body
    scan_interval: 21600

template:
  - sensor:
      - unique_id: hass_next_release
        state: >
          {% set start_time = state_attr('calendar.home_assistant_devs', 'start_time') %}
          {{ (as_timestamp(start_time, default=0) + 60*60*20.5) | timestamp_local(default) }}
        attributes:
          friendly_name: >
            {% set release = state_attr('calendar.home_assistant_devs','message') %}
            {% if release == 'Home Assistant Core Beta Release' %}
              Prossima beta
            {% elif release == 'Home Assistant Core Release' %}
              Prossima release
            {% else %}
              {{ release }}
            {% endif %}
          icon: mdi:dev-to
          device_class: timestamp

      - unique_id: updates
        state: >
          {{ this.attributes.values() | sum }}
        attributes:
          home_assistant: >
            {% set installed = states('sensor.current_version') %}
            {% set latest = states('sensor.docker_hub_beta') if version(installed).beta else states('sensor.docker_hub') %}
            {{ iif(version(latest) > version(installed) and '.' in installed and '.' in latest, 1, 0) }}
          update_entities: >
            {{ states.update | selectattr('state','eq','on') | list | count }}
          other_updates: >
            {{ states('sensor.template_other_updates') | int(0) }}

      - unique_id: other_updates
        state: >
          {% set ns = namespace(list=[]) %}
          {% for k, v in this.attributes | dictsort(by='value') %}
            {% set ns.list = ns.list + [v] if v != '' else [] %}
          {% endfor %}
          {{ ns.list | count }}

command_line:
  - sensor: 
      name: hacs_installed
      command: |-
        python3 << EOF
        import os, json
        installed = {"repositories": []}
        PATH = "/volume1/@appdata/homeassistant/config/.storage/hacs.repositories"
        with open(PATH, "r", encoding="UTF-8") as file:
            data = json.load(file)["data"]
            for i in data:
                if "installed" in data[i]:
                    installed["repositories"] += [data[i]["full_name"]]
            file.close()
        print(json.dumps(installed))
        EOF
      value_template: >
        {{ value_json.repositories | count }}
      json_attributes:
        - repositories
      scan_interval: 86400
